#pragma once

#include <boost/test/test_tools.hpp>

#include "config.hpp" // generated by cmake, see config.hpp.in

class io_fixture
{
  protected:
    io_fixture();

    class outputter
    {
      public:
        template <class T> outputter& operator<<(const T& t)
        {
            m_oa << t;
            return *this;
        }

      private:
        outputter(const char* filename);
        friend class io_fixture;

        test_ostream  m_os;
        test_oarchive m_oa;
    };

    class inputter
    {
      public:
        template <class T> inputter& operator>>(T& t)
        {
            m_ia >> t;
            return *this;
        }

      private:
        inputter(const char* filename);
        friend class io_fixture;

        test_istream  m_is;
        test_iarchive m_ia;
    };

    outputter output();

    inputter input();

    template <class T> void check_roundtrip(const T& t1)
    {
        using boost::serialization::make_nvp;
        T t2;
        {
            output() << make_nvp("t", t1);
        }
        {
            input() >> make_nvp("t", t2);
        }
        BOOST_CHECK_EQUAL(t1, t2);
    }

    template <class T> void check_roundtrip_collection(const T& t1)
    {
        using boost::serialization::make_nvp;
        T t2;
        {
            output() << make_nvp("t", t1);
        }
        {
            input() >> make_nvp("t", t2);
        }
        BOOST_TEST(t1 == t2, boost::test_tools::per_element());
    }

    const std::string& get_filename() { return m_filename; }

  private:
    std::string m_filename;
};
