################################################################################
#                                                                              #
#          Travis "continuous integration" configuration file                  #
#                                                                              #
################################################################################

# When the OS is "linux" (more precisely Ubuntu), we take version 14.04.
dist: trusty

# The language is C++. I'm still not entirely sure what this does.
language: cpp

# Build on both Ubuntu 14.04 and macOS (version?).
os:
  - linux
  - osx

# Build for both GCC and Clang. Versions may be ancient. They both have some
# C++11 defects (no forward_list etc).
compiler:
  - gcc
  - clang

# Make sure we have the correct boost libs and a modern version of cmake.
# Boost 1.54 is fetched, which is ancient by now, but we'll have to deal
# with it. Note that these settings only work on Ubuntu. On macOS, we use brew
# to install a modern version of boost. That is handled in the build.py script.
addons:
  apt:
    sources:
      - ubuntu-toolchain-r-test
      - boost-latest
    packages:
      - cmake
      - libboost-system-dev
      - libboost-serialization-dev
      - libboost-test-dev

# Environment variables. Every item in the sequence (delimited by dashes) gives
# us another build in the build matrix.
env:
  - BUILD_SHARED_LIBS=ON  CMAKE_BUILD_TYPE=Debug
  - BUILD_SHARED_LIBS=ON  CMAKE_BUILD_TYPE=Release
  - BUILD_SHARED_LIBS=OFF CMAKE_BUILD_TYPE=Debug
  - BUILD_SHARED_LIBS=OFF CMAKE_BUILD_TYPE=Release

# Let the python build script handle it from this point on.
# before_install: python build.py before-install
# install:        python build.py install
# before_script:  python build.py before-build
# script:         python build.py build after-build before-test test after-test
# after_success:  python build.py after-success
# after_failure:  python build.py after-failure
# after_script:

before_script:
  - mkdir build
  - cd build
  - cmake .. -DCMAKE_BUILD_TYPE=$CMAKE_BUILD_TYPE -DBUILD_SHARED_LIBS=$BUILD_SHARED_LIBS

script:
  - cmake --build .
  - ctest --output-on-failure
